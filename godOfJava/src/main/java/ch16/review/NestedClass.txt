[1] Nested 클래스
    1. 사용 이유
    * 코드를 간단하게 표현하기 위해서

    2. 종류
    * Static Nested: 한 곳에서만 사용되는 클래스를 논리적으로 묶어서 처리할 필요가 있을 때
    * inner class - Local inner class: 캡슐화가 필요할 때
    * inner class - Anonymous inner: GUI listener

    3. 특징
    1) 접근
        * inner class: 외부 클래스의 모든 변수 접근 가능
        * Static Nested: static 변수만 접근 가능
        * 외부 클래스: 모든 변수 접근 가능
    2) 생성
        * OuterOfStatic.StaticNested staticNested = new OuterOfStatic.StaticNested()
        * OuterOfInner outer = new OuterOfInner() -> OuterOfInner.Inner inner = outer.new Inner()